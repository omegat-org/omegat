import org.omegat.documentation.*

plugins {
    id 'org.omegat.documentation'
    id 'org.omegat.common-utilities'
    id 'maven-publish'
    id 'signing'
}

def documentRootDir = file('src_docs')
def styleRootDir = file('src_docs/xsl')

docConfig {
    styleDir.set(styleRootDir)
    docRoot.set(documentRootDir)
    outputRoot.set(layout.buildDirectory.dir('docs'))
}

tasks.register('genDocIndex', Copy) {
    def inputTemplate = layout.projectDirectory.file('src_docs/template/index.html')
    def docPropsFiles = fileTree(dir: 'src_docs/manual', include: '**/version*.properties')
    def langInformation = docPropsFiles.collect { props ->
        def docVersion = loadProperties(props).version
        ['code'  : props.parentFile.name, 'nomanual': false, 'version': docVersion,
         'name'  : Locale.forLanguageTag(props.parentFile.name.replace('_', '-')).getDisplayName(),
         'status': docVersion == version ? 'up-to-date' : 'out-of-date']
    }
    description = 'Generates the HTML docs index file.'
    inputs.files docPropsFiles, inputTemplate
    from inputTemplate
    into layout.buildDirectory.dir("tmp/manual/")
    expand('languages': langInformation)
    doLast {
        copy {
            from layout.buildDirectory.file("tmp/manual/index.html")
            into layout.buildDirectory.dir("docs/manual")
        }
    }
    filteringCharset = 'UTF-8'
}

tasks.register('manualZips') {
    description = 'Builds the zipped manuals to bundle into the application.'
    group = 'other'
}

tasks.register('manualHtmls') {
    description = 'Builds and zips the HTML manuals for all languages.'
    finalizedBy(genDocIndex)
    group = 'documentation'
}

ext.makeDocumentationTasks = { lang ->
    def docbookInclude = tasks.register("docbookInclude${lang.capitalize()}", TransformationTask) {
        styleSheetFile.set(layout.projectDirectory.file("${documentRootDir}/xsl/passthrough.xsl"))
        outputFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/_index.xml"))
        inputFile.set(layout.projectDirectory.file("src_docs/manual/${lang}/OmegaTUsersManual_xinclude_full.xml"))
    }

    def copyCss = tasks.register("copyCss${lang.capitalize()}", Copy) {
        description = 'Copies images and CSS files to target.'
        into layout.buildDirectory.dir("docs/manual/${lang}")
        from new File(documentRootDir, 'style/omegat.css')
    }

    def copyImages = tasks.register("copyImages${lang.capitalize()}", Copy) {
        description 'Copies images and CSS files to target.'
        into layout.buildDirectory.dir("docs/manual/${lang}/images/")
        from fileTree(dir: layout.projectDirectory.dir("src_docs/manual/${lang}/images/"), include: "*.png")
        from layout.projectDirectory.file("images/OmegaT.svg")
    }

    def docbookHtml = tasks.register("docbookHtml${lang.capitalize()}", DocbookHtmlTask) {
        description = 'Generates a chunked HTML documentation.'
        styleSheetFile.set(layout.projectDirectory.file("${documentRootDir}/xsl/xhtml.xsl"))
        inputFile.set(layout.projectDirectory.file("${documentRootDir}/manual/${lang}/OmegaTUsersManual_xinclude_full.xml"))
        outputFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/_index.html"))
        dependsOn(docbookInclude, copyImages, copyCss)
    }

    def whcToc = tasks.register("whcToc${lang.capitalize()}", TransformationTask) {
        description = 'Generates a whc header and index.'
        styleSheetFile.set(layout.projectDirectory.file("${documentRootDir}/xsl/whc-toc.xsl"))
        inputFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/_index.html"))
        outputFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/toc.xml"))
        dependsOn(docbookHtml)
    }

    def whcIndex = tasks.register("whcIndex${lang.capitalize()}", TransformationTask) {
        description = 'Generates a whc header and index.'
        styleSheetFile.set(layout.projectDirectory.file("${documentRootDir}/xsl/whc-index.xsl"))
        inputFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/_index.html"))
        outputFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/index.html"))
        dependsOn(docbookHtml, whcToc)
    }

    def whcHeader = tasks.register("whcHeader${lang.capitalize()}", TransformationTask) {
        description = 'Generates a whc header and index.'
        styleSheetFile.set(layout.projectDirectory.file("${documentRootDir}/xsl/whc-header.xsl"))
        inputFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/_index.xml"))
        outputFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/_header.xhtml"))
        dependsOn(copyCss, docbookInclude)
    }
    def buildDocumentTask = tasks.register("manual${lang.capitalize()}", WhcTask) {
        description = 'Builds the whc contents.'
        tocFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/toc.xml"))
        inputFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/index.html"))
        headerFile.set(layout.buildDirectory.file("tmp/manual/${lang}/xhtml5/_header.xhtml"))
        documentLayout.set('simple')
        localJQuery.set(true)
        parameterList.set([
                '--navigation-background-color', '#FDFDFD',
                '--field-background-color', '#FDFDFD',
                '--panel-background-color', '#FDFDFD',
        ])
        contentFiles.set(fileTree(dir: layout.buildDirectory.dir("tmp/manual/${lang}/xhtml5"), include: '*.html', exclude: '_*'))
        outputDirectory.set(layout.buildDirectory.dir("docs/manual/${lang}"))
        dependsOn(whcHeader, whcToc, whcIndex)
        group = 'documentation'
    }
    assemble.dependsOn buildDocumentTask
    manualHtmls.dependsOn buildDocumentTask

    def zipTask= tasks.register("manualZip${lang.capitalize()}", Zip) {
        from fileTree(dir: layout.buildDirectory.file("docs/manual/${lang}"))
        exclude 'docs/manual/index.html'
        from fileTree(dir: "src_docs/${lang}", include: '**/version*.properties')
        archiveFileName = "${lang}.zip"
        destinationDirectory = file(layout.buildDirectory.dir("docs/manuals/"))
        dependsOn buildDocumentTask
    }
    assemble.dependsOn(zipTask)
    manualZips.dependsOn(zipTask)

    def languageName = new Locale(lang).displayName

    // Create a new publication for this language
    def publication = publishing.publications.create("manual${lang.capitalize()}", MavenPublication) {
        groupId = 'org.omegat'
        artifactId = "omegat-manual-${lang}"
        version = '6.1.0'

        // Add the jar task to the publication
        artifact(zipTask)

        pom {
            name = "OmegaT ${languageName} manual"
            description = "OmegaT HTML manual for language ${languageName}"
            url = 'https://omegat.org'
            scm {
                connection = "scm:git:https://github.com/omegat-org/omegat"
                developerConnection = "scm:git:https://github.com/omegat-org/omegat"
                url = "https://github.com/omegat-org/omegat"
            }
            licenses {
                license {
                    name = 'The GNU General Public License, Version 3.0'
                    url = 'https://www.gnu.org/licenses/licenses/gpl-3.0.html'
                }
            }
            developers {
                developer {
                    id = 'omegat'
                    name = 'OmegaT Developers'
                    email = 'info@omegat.org'
                }
            }
        }
    }

    signing {
        sign publication
        if (!findProperty("signing.keyId")) {
            useGpgCmd()
        }
    }
}

tasks.register('firstSteps') {
    description = 'Builds the introductory page for all languages at src/docs/greetings/.'
    group = 'documentation'
}
assemble.dependsOn(firstSteps)

ext.makeFirstStepTask = { lang ->
    def firstStepsHtmlFinally = tasks.register("firstSteps${lang.capitalize()}Finally", Copy) {
        from layout.projectDirectory.file("src_docs/style/omegat.css")
        into layout.buildDirectory.dir("docs/greetings/${lang}/")
    }
    def firstStepsHtml = tasks.register("firstSteps${lang.capitalize()}", DocbookHtmlTask) {
        description = 'Generates a chunked HTML documentation.'
        inputFile.set(layout.projectDirectory.file("${documentRootDir}/greeting/${lang}/First_Steps.xml"))
        outputFile.set(layout.buildDirectory.file("docs/greetings/${lang}/first_steps.html"))
        styleSheetFile.set(layout.projectDirectory.file("${documentRootDir}/xsl/html.xsl"))
        finalizedBy(firstStepsHtmlFinally)
    }
    firstSteps.dependsOn(firstStepsHtml)
    firstSteps.dependsOn(firstStepsHtmlFinally)
}
