plugins {
    id 'java-library'
    id 'eclipse'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id 'com.diffplug.spotless'
    id 'com.github.spotbugs'
    id 'org.omegat.common-utilities'
    id 'net.ltgt.errorprone'
    id 'net.ltgt.nullaway'
}

// Definition of OmegaT versioning
def localPropsFile = file('local.properties')

ext {
    if (localPropsFile.file) {
        loadProperties(localPropsFile).each { k, v ->
            if (!findProperty(k)) {
                set(k, v)
            }
        }
    }
    providedCoreLibsDir = file(layout.settingsDirectory.dir('lib/provided/core'))
    providedModuleLibsDir = file(layout.settingsDirectory.dir('lib/provided/module'))
}

repositories {
    mavenCentral()
    mavenLocal()
}

java {
    withSourcesJar()
    withJavadocJar()
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.named("test", Test) {
    useJUnit()
    workingDir project.rootProject.projectDir
    // Test in headless mode with ./gradlew test -Pheadless
    if (project.hasProperty('headless')) {
        systemProperty 'java.awt.headless', 'true'
    }
    // Allow setting the max heap size for the run task from the command line, e.g.
    // `gradle -PtestMaxHeapSize=2048M test`
    maxHeapSize = findProperty('testMaxHeapSize')
    systemProperty 'java.util.logging.config.file', layout.settingsDirectory.file("config/test/logger.properties").asFile
}

javadoc {
    failOnError = false
    options {
        jFlags('-Duser.language=en')
        addStringOption('locale', 'en_US')
        addStringOption('bottom', '<span>Copyright 2000-2023, OmegaT project and contributors</span>')
        addStringOption('encoding', 'UTF-8')
        addBooleanOption("Xdoclint:none", true)
        addBooleanOption('html5', true)
        addBooleanOption('frames', false)
        addBooleanOption('public', true)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll '-Xlint'
    options.errorprone.disableWarningsInGeneratedCode = true
    options.errorprone.disable 'InlineMeSuggester', 'EmptyCatch'
}

tasks {
    compileTestJava {
        options.errorprone.enabled = false
    }
}

dependencies {
    errorprone("com.google.errorprone:error_prone_core:2.40.0")
    errorprone("com.uber.nullaway:nullaway:0.12.7")
}

nullaway {
    annotatedPackages.add("org.omegat")
}

spotbugs {
    reportLevel = com.github.spotbugs.snom.Confidence.valueOf("DEFAULT")
    extraArgs = ['-longBugCodes']
    jvmArgs = ['-Duser.language=en']
    // onlyAnalyze <classes/packages>  only analyze given classes and packages;
    // end with .* to indicate classes in a package, .- to indicate a package prefix
    toolVersion = '4.9.3'
    onlyAnalyze = ['org.omegat.-']
    excludeFilter = project.rootProject.layout.projectDirectory.file("config/spotbugs/exclude.xml")
}

spotbugsMain {
    reports {
        text.required = true
        html.required = true
    }
}

spotbugsTest {
    reports {
        text.required = true
        html.required = true
    }
}

checkstyle {
    toolVersion = libs.versions.checkstyle.get()
}
checkstyleMain.exclude '**/gen/**'

spotless {
    enforceCheck = false
    java {
        eclipse().configFile layout.settingsDirectory.file("config/spotless/eclipse-formatting.xml")
        removeUnusedImports()
    }
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.withType(Sync).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.withType(Zip).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

pmd {
    toolVersion = '6.38.0'
    ruleSetFiles = layout.settingsDirectory.files("config/pmd/ruleset.xml")
    consoleOutput = true
}

tasks.withType(Pmd).configureEach {
    exclude '**/gen/**'
    reports {
        xml.required.set(true)
        html.required.set(true)

        // Consolidate reports in root project
        xml.outputLocation.set(layout.settingsDirectory.file("build/reports/pmd/${project.name}-pmd.xml"))
        html.outputLocation.set(layout.settingsDirectory.file("build/reports/pmd/${project.name}-pmd.html"))
    }
}
