repositories {
    mavenCentral()
}

configurations {
    jaxb
}

dependencies {
    jaxb(libs.jaxb4.xjc)
    jaxb(libs.jaxb4.api)
    jaxb(libs.jaxb4.runtime)
}

def genjaxb = tasks.register('genJAXB') {
    description = 'Generate classes for loading and manipulating XML formats'
    outputs.dir layout.buildDirectory.dir('generated/sources/jaxb/main/java')
    group = 'jaxb'
    doFirst {
        mkdir layout.buildDirectory.dir('generated/sources/jaxb/main/java').get().asFile
    }
}
compileJava.dependsOn(genjaxb)

ext.makeJaxbTask = { args ->
    def taskName = "gen${args.name.capitalize()}"
    tasks.register(taskName, JavaExec) {
        classpath = configurations.jaxb
        mainClass = 'com.sun.tools.xjc.XJCFacade'
        delegate.args args.args
        outputs.dir args.outdir
        group = 'jaxb'
    }
    genJAXB.dependsOn taskName
}

def schemaSourcePath = 'src/schemas/'
def generatedSourcePath = 'build/generated/sources/jaxb/main/java/'
makeJaxbTask(name: 'segmentation', outdir: generatedSourcePath + 'gen/core/segmentation',
        args: ['-no-header', '-npa', '-d', generatedSourcePath, '-p', 'gen.core.segmentation',
               schemaSourcePath + 'srx20.xsd'])
makeJaxbTask(name: 'filters', outdir: generatedSourcePath + 'gen/core/filters',
        args: ['-no-header', '-d', generatedSourcePath, '-p', 'gen.core.filters', schemaSourcePath + 'filters.xsd'])
makeJaxbTask(name: 'tbx', outdir: generatedSourcePath + 'gen/core/tbx',
        args: ['-no-header', '-d', generatedSourcePath, '-p', 'gen.core.tbx', schemaSourcePath + 'tbx.xsd'])
makeJaxbTask(name: 'project', outdir: generatedSourcePath + 'gen/core/project',
        args: ['-no-header', '-d', generatedSourcePath, '-p', 'gen.core.project',
               schemaSourcePath + 'project_properties.xsd'])
