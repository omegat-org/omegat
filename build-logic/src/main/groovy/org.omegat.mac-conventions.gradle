
configurations {
    genMac
}

repositories {
    mavenCentral()
}

dependencies {
    genMac(libs.omegat.appbundler)
}

tasks.register('genMac') {
    def appbundlerClasspath = configurations.genMac.asPath
    def outDir = layout.buildDirectory.file("appbundler").get().toString()
    def appName = project.property('org.omegat.appName')
    def appClass = project.property('org.omegat.mainClassName')
    description = 'Generates the macOS .app skeleton. Depends on AppBundler (https://github.com/TheInfiniteKind/appbundler).'
    outputs.dir layout.buildDirectory.file("appbundler")
    doLast {
        ant.taskdef(name: 'appbundler',
                classname: 'com.oracle.appbundler.AppBundlerTask',
                classpath: appbundlerClasspath)
        ant.appbundler(outputdirectory: outDir,
                name: appName,
                displayname: appName,
                executablename: appName,
                identifier: 'org.omegat.OmegaT',
                icon: 'images/OmegaT.icns',
                version: '${version}',
                jvmrequired: '${jvmRequired}',
                shortversion: '${version}',
                mainclassname: appClass) {
            option(value: "-Xdock:name=${appName}")
            option(value: "-Dapple.awt.application.name=${appName}")
            option(value: "-Dapple.awt.application.appearance=system")
            argument(value: '--config-file=${configfile}')
            bundledocument(extensions: 'project',
                    name: "${appName} Project",
                    role: 'editor',
                    icon: 'images/OmegaT.icns')
            bundledocument(extensions: '*',
                    name: 'All Files',
                    role: 'none')
            plistentry(key: 'JVMRuntime', value: 'jre.bundle')
        }
    }
}

ext.makeMacTask = { args ->
    def prepInstallTaskName = 'prepInstall' + args.name.capitalize()  + "Dist"
    def installTaskName = 'install' + args.name.capitalize()  + "Dist"
    def cleanSignedInstallTaskName = 'cleanInstall' + args.name.capitalize() + "SignedDist"
    def prepSignedInstallTaskName = 'prepInstall' + args.name.capitalize() + "SignedDist"
    def signedInstallTaskName = args.name + "InstallSignedDist"
    def distZipTaskName = args.name + "DistZip"
    def signedZipTaskName = args.name + "Signed"
    def notarizeTaskName = args.name + "Notarize"
    def prepStapledNotarizedDistZipTaskName = "prep" + args.name.capitalize() + "StapledNotarized"
    def stapledNotarizedDistZipTaskName = args.name + "StapledNotarized"
    def parentTask = tasks.getByName('mac')

    // Use providers for configuration cache compatibility
    def projectVersion = providers.gradleProperty('version').getOrElse(version)
    def appName = providers.gradleProperty('org.omegat.appName').getOrElse('OmegaT')
    def omtVersionBeta = providers.gradleProperty('omtVersion.beta').getOrElse('')
    def macCodesignIdentity = providers.gradleProperty('macCodesignIdentity')
    def macNotarizationUsername = providers.gradleProperty('macNotarizationUsername')

    def distZipTask = tasks.register(distZipTaskName, Zip) {
        description = "Creates a macOS distribution for ${args.name}."
        // mac specific contents
        from(genMac.outputs) {
            exclude '**/MacOS/OmegaT', '**/Info.plist', '**/java.entitlements'
        }
        from(genMac.outputs) {
            include '**/MacOS/OmegaT'
            filePermissions {
                unix(0755)
            }
        }
        from(genMac.outputs) {
            include '**/Info.plist'
            expand(version: projectVersion,
                    jvmRequired: '11+',
                    // when bundled JRE, path 'jre.bundle', otherwise 'default'
                    jreRuntime: args.jrePath ? 'jre.bundle' : 'default',
                    // $APP_ROOT is expanded at runtime by the launcher binary
                    configfile: '$APP_ROOT/Contents/Resources/Configuration.properties')
        }
        into('OmegaT.app/Contents/Java') {
            with distributions.main.contents
            exclude '*.sh', '*.kaptn', 'OmegaT', 'OmegaT.bat', 'omegat.desktop', '*.exe'
        }
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        archiveFileName.set("${appName}_${projectVersion}${omtVersionBeta}_${args.suffix}.zip")
        if (args.jrePath && !args.jrePath.empty) {
            from(tarTree(args.jrePath.singleFile)) {
                into 'OmegaT.app/Contents/PlugIns'
                includeEmptyDirs = false
                eachFile {
                    replaceRelativePathSegment(it, /jdk.*-jre/, 'jre.bundle')
                }
            }
        }
        group = 'omegat distribution'
    }
    assemble.dependsOn distZipTask
    mac.dependsOn distZipTask

    def prepInstallTask = tasks.register(prepInstallTaskName, Delete) {
        delete file(layout.buildDirectory.file(
                "install/${appName}-${args.suffix}/OmegaT.app/Contents/PlugIns/jre.bundle"))
    }

    def installTask = tasks.register(installTaskName, Sync) {
        description = 'Builds the macOS distribution.'
        // mac specific contents
        from(genMac.outputs) {
            exclude '**/MacOS/OmegaT', '**/Info.plist', '**/java.entitlements'
        }
        from(genMac.outputs) {
            include '**/MacOS/OmegaT'
            filePermissions {
                unix(0755)
            }
        }
        from(genMac.outputs) {
            include '**/Info.plist'
            expand(version: projectVersion,
                    jvmRequired: '11+',
                    // $APP_ROOT is expanded at runtime by the launcher binary
                    configfile: '$APP_ROOT/Contents/Resources/Configuration.properties')
        }
        into('OmegaT.app/Contents/Java') {
            with distributions.main.contents
            exclude '*.sh', '*.kaptn', 'OmegaT', 'OmegaT.bat', 'omegat.desktop', '*.exe'
        }
        if (args.jrePath && !args.jrePath.empty) {
            from(tarTree(args.jrePath.singleFile)) {
                into 'OmegaT.app/Contents/PlugIns'
                includeEmptyDirs = false
                eachFile {
                    replaceRelativePathSegment(it, /jdk.*-jre/, 'jre.bundle')
                }
            }
        }
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        destinationDir = file(layout.buildDirectory.file("install/${appName}-${args.suffix}"))
        group = 'distribution'
        dependsOn prepInstallTask
        dependsOn tasks.named('hunspellSignedJar')
    }
    parentTask.dependsOn installTask

    def cleanSignedInstallTask = tasks.register(cleanSignedInstallTaskName, Delete) {
        delete file(layout.buildDirectory.file(
                "install/${appName}-${args.suffix}_Signed/OmegaT.app/Contents/PlugIns/jre.bundle"))
    }

    def prepSignedInstallTask = tasks.register(prepSignedInstallTaskName, Sync) {
        description = 'Builds the signed macOS distribution. Requires an Apple Developer Account.'
        from(installTask)
        from(hunspellSignedJar) {
            into 'OmegaT.app/Contents/Java/lib'
        }
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        destinationDir = file(layout.buildDirectory.file("install/${appName}-${args.suffix}_Signed"))
        dependsOn cleanSignedInstallTask
    }

    def signedInstallTask = tasks.register(signedInstallTaskName, Exec) {
        dependsOn hunspellSignedJar
        dependsOn prepSignedInstallTask
        commandLine 'codesign', '--deep', '--force',
                '--sign', macCodesignIdentity,
                '--timestamp',
                '--options', 'runtime',
                '--entitlements', file('release/mac-specific/java.entitlements'),
                file(layout.buildDirectory.file(
                        "install/${appName}-${args.suffix}_Signed/OmegaT.app"))
    }

    def signedZipTask = tasks.register(signedZipTaskName, Zip) {
        def zipRoot = "${appName}_${projectVersion}${omtVersionBeta}_${args.suffix}_Signed"
        from signedInstallTask
        into zipRoot
        archiveFileName.set("${zipRoot}.zip")
        dependsOn signedInstallTask
    }

    tasks.register(notarizeTaskName, Exec) {
        inputs.files signedZipTask.get().archiveFile
        // Assuming setup per instructions at
        // https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution/customizing_the_notarization_workflow#3087734
        commandLine 'xcrun', 'altool', '--notarize-app',
                '--primary-bundle-id', "org.omegat.$projectVersion",
                '--username', macNotarizationUsername,
                '--password', '@keychain:AC_PASSWORD',
                '--file', signedZipTask.get().archiveFile
        dependsOn signedZipTask
    }

    def prepStapledNotarizedDistZipTask = tasks.register(prepStapledNotarizedDistZipTaskName, Exec) {
        commandLine 'xcrun', 'stapler', 'staple',
                file(layout.buildDirectory.file("install/${appName}-${args.suffix}_Signed/OmegaT.app"))
    }
    tasks.register(stapledNotarizedDistZipTaskName, Zip) {
        def zipRoot = "${appName}_${projectVersion}${omtVersionBeta}_${args.suffix}_Notarized"
        from signedInstallTask
        into zipRoot
        archiveFileName.set("${zipRoot}.zip")
        dependsOn prepStapledNotarizedDistZipTask
        dependsOn signedInstallTask
    }
}
