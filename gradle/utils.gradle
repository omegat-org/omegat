ext {
    loadProperties = { propFile ->
        def config = new Properties()
        if (propFile.canRead()) {
            propFile.withInputStream { config.load(it) }
        }
        config
    }

    getExecOutput = { ... args = [] ->
        def exe = providers.exec {
            ignoreExitValue = true
            commandLine args
        }
        exe.result.get() == 0 ? exe.standardOutput.asText.get().trim() : ''
    }

    getUpdateSuffix = { update ->
        if (!update || update == '0') {
            return ''
        }
        if (update.length() == 1) {
            return "_0${update}"
        }
        "_${update}"
    }

    gitBranch = {
        providers.exec {commandLine("git", "name-rev", "--name-only", "HEAD")}.standardOutput.asText.get().trim()
    }

    gitRemote = {
        def branch = gitBranch()
        def exe = providers.exec {
            ignoreExitValue = true
            commandLine("git", "config", "branch.${branch}.pushRemote")
        }
        def remote = exe.result.get() == 0 ? exe.standardOutput.asText.get().trim() : ''
        if (remote.empty) {
            exe = providers.exec {
                ignoreExitValue = true
                commandLine("git", "config", "branch.${branch}.remote")
            }
            remote = exe.result.get() == 0 ? exe.standardOutput.asText.get().trim() : ''
        }
        if (!remote.empty) {
            remote
        } else {
            logger.warn("Could not detect git remote name. Assuming 'origin'.")
            'origin'
        }
    }

    gitBranchSplitPoint = {
        def remote = gitRemote()
        if (!remote.empty) {
            providers.exec {
                commandLine("git", "merge-base", "HEAD", "$remote/master")
            }.standardOutput.asText.get().trim()
        } else {
            ''
        }
    }

    gitModifiedFiles = {
        def splitPoint = gitBranchSplitPoint()
        if (!splitPoint.empty) {
            providers.exec {
                commandLine("git", "diff", "--name-only", "HEAD", "$splitPoint")
            }.standardOutput.asText.get().trim().tokenize()
        } else {
            []
        }
    }

    exePresent = { exe ->
        ["where $exe", "which $exe"].any {
            try {
                def findExe = it.execute()
                findExe.waitForProcessOutput()
                return findExe.exitValue() == 0
            } catch (any) {
                return false
            }
        }
    }

    conditions = { List... items ->
        items.each { val, str ->
            if (!val) {
                logger.warn(str)
            }
        }
        items.every { it[0] }
    }

    condition = { val, str ->
        conditions([val, str])
    }

    replaceRelativePathSegment = { FileCopyDetails deets, pattern, replacement ->
        def segs = deets.relativePath.segments.collect {
            it =~ pattern ? replacement : it
        }
        deets.relativePath = new RelativePath(!deets.directory, segs as String[])
    }

    camelCase = { str ->
        str.tokenize('-_ ').withIndex().collect { tok, i ->
            i == 0 ? tok : tok.capitalize()
        }.join()
    }

   clsName = { cls ->
        cls.split('\\.').last()
    }
}
