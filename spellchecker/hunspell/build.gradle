plugins {
    id 'java-library'
}

dependencies {
    compileOnly(project.rootProject)
    if (providedCoreLibsDir.directory) {
        compileOnly fileTree(dir: providedCoreLibsDir, includes: ['**/languagetool-core-*.jar',
                '**/commons-io-*.jar', '**/lib-mnemonics-*.jar', '**/slf4j-format-jdk14-*.jar',
                '**/hunspell-*.jar'])
    } else {
        compileOnly(libs.commons.io)
        compileOnly(libs.omegat.mnemonics)
        compileOnly(libs.slf4j.format.jdk14)
        compileOnly(libs.languagetool.core) {
            exclude module: 'guava'
            exclude module: 'language-detector'
            exclude group: 'com.google.android'
            exclude module: 'jackson-databind'
            exclude group: 'org.jetbrains'
        }
        // hunspell is in dependency of languagetool-core
        // and usable in OmegaT-core libraries
        // implementation(libs.dumont.hunspell)
    }
    testImplementation(libs.junit4)
    testImplementation(libs.assertj)
    testImplementation(testFixtures(project.rootProject))
    testImplementation(libs.commons.io)
    testRuntimeOnly(libs.languagetool.en)
    testRuntimeOnly(libs.languagetool.de)
}

jar {
    archiveAppendix.set("spellchecker")
    destinationDirectory.set(rootProject.layout.buildDirectory.dir("modules").get())
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    def pluginProp = loadProperties(file('plugin.properties'))
    manifest {
        attributes('License': 'GNU Public License version 3 or later',
                'Implementation-Version': pluginProp.Version,
                'OmegaT-Plugins': pluginProp.Class,
                'Plugin-Author': pluginProp.Author,
                'Plugin-Version': pluginProp.Version,
                'Plugin-Name': pluginProp.Name,
                'Plugin-Category': pluginProp.Category,
                'Plugin-Description': pluginProp.Description
        )
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
