/**************************************************************************
 OmegaT - Computer Assisted Translation (CAT) tool
          with fuzzy matching, translation memory, keyword search,
          glossaries, and translation leveraging into updated projects.

 Copyright (C) 2016 Aaron Madlon-Kay
               Home page: https://www.omegat.org/
               Support center: https://omegat.org/support

 This file is part of OmegaT.

 OmegaT is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 OmegaT is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
 **************************************************************************/

package org.omegat.gui.preferences.view;

import javax.swing.JPanel;

import org.omegat.util.OStrings;

/**
 * @author Aaron Madlon-Kay
 */
@SuppressWarnings("serial")
public class AppearancePreferencesPanel extends JPanel {

    /** Creates new form AppearancePanel */
    public AppearancePreferencesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupColorSync = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        themePanel = new javax.swing.JPanel();
        syncWithOSColorRB = new javax.swing.JRadioButton();
        useDarkThemeRB = new javax.swing.JRadioButton();
        cbLightThemeSelect = new javax.swing.JComboBox<>();
        cbDarkThemeSelect = new javax.swing.JComboBox<>();
        useLightDefaultThemeRB = new javax.swing.JRadioButton();
        menustylePanel = new javax.swing.JPanel();
        cbMenustyleSelect = new javax.swing.JComboBox<>();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 8), new java.awt.Dimension(0, 8), new java.awt.Dimension(32767, 8));
        restoreWindowButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setMinimumSize(new java.awt.Dimension(250, 200));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setAlignmentX(0.0F);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        themePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Theme"));
        themePanel.setAlignmentX(0.0F);
        themePanel.setAlignmentY(0.0F);
        themePanel.setLayout(new java.awt.GridBagLayout());

        buttonGroupColorSync.add(syncWithOSColorRB);
        org.openide.awt.Mnemonics.setLocalizedText(syncWithOSColorRB, "Sync with OS color preference");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        themePanel.add(syncWithOSColorRB, gridBagConstraints);

        buttonGroupColorSync.add(useDarkThemeRB);
        org.openide.awt.Mnemonics.setLocalizedText(useDarkThemeRB, "Dark Theme");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        themePanel.add(useDarkThemeRB, gridBagConstraints);

        cbLightThemeSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbLightThemeSelect.setMinimumSize(new java.awt.Dimension(280, 80));
        cbLightThemeSelect.setPreferredSize(new java.awt.Dimension(280, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        themePanel.add(cbLightThemeSelect, gridBagConstraints);

        cbDarkThemeSelect.setMinimumSize(new java.awt.Dimension(280, 80));
        cbDarkThemeSelect.setPreferredSize(new java.awt.Dimension(280, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        themePanel.add(cbDarkThemeSelect, gridBagConstraints);

        buttonGroupColorSync.add(useLightDefaultThemeRB);
        org.openide.awt.Mnemonics.setLocalizedText(useLightDefaultThemeRB, "Light/Default Theme");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        themePanel.add(useLightDefaultThemeRB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(themePanel, gridBagConstraints);

        menustylePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Menu Style\n"));
        menustylePanel.setAlignmentX(0.0F);
        menustylePanel.setAlignmentY(0.0F);
        menustylePanel.setLayout(new java.awt.BorderLayout());

        cbMenustyleSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbMenustyleSelect.setMinimumSize(new java.awt.Dimension(280, 30));
        cbMenustyleSelect.setPreferredSize(new java.awt.Dimension(280, 30));
        menustylePanel.add(cbMenustyleSelect, java.awt.BorderLayout.EAST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(menustylePanel, gridBagConstraints);

        add(jPanel1);
        add(filler1);

        org.openide.awt.Mnemonics.setLocalizedText(restoreWindowButton, OStrings.getString("MW_OPTIONSMENU_RESTORE_GUI")); // NOI18N
        add(restoreWindowButton);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupColorSync;
    javax.swing.JComboBox<String> cbDarkThemeSelect;
    javax.swing.JComboBox<String> cbLightThemeSelect;
    javax.swing.JComboBox<String> cbMenustyleSelect;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel jPanel1;
    javax.swing.JPanel menustylePanel;
    javax.swing.JButton restoreWindowButton;
    javax.swing.JRadioButton syncWithOSColorRB;
    javax.swing.JPanel themePanel;
    javax.swing.JRadioButton useDarkThemeRB;
    javax.swing.JRadioButton useLightDefaultThemeRB;
    // End of variables declaration//GEN-END:variables
}
