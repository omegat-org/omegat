/**************************************************************************
 OmegaT - Computer Assisted Translation (CAT) tool
          with fuzzy matching, translation memory, keyword search,
          glossaries, and translation leveraging into updated projects.

 Copyright (C) 2000-2006 Keith Godfrey and Maxym Mykhalchuk
               2012 Didier Briel, Aaron Madlon-Kay
               2015 Aaron Madlon-Kay
               2016 Aaron Madlon-Kay
               Home page: https://www.omegat.org/
               Support center: https://omegat.org/support

 This file is part of OmegaT.

 OmegaT is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 OmegaT is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
 **************************************************************************/

package org.omegat.gui.preferences.view;

import javax.swing.JLabel;
import javax.swing.JPanel;

import org.omegat.util.OStrings;

/**
 * @author Maxym Mykhalchuk
 * @author Didier Briel
 * @author Aaron Madlon-Kay
 */
@SuppressWarnings("serial")
public class SaveOptionsPanel extends JPanel {

    /** Creates new form SaveOptionsPanel */
    public SaveOptionsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        intervalDescriptionPanel = new javax.swing.JPanel();
        intervalDescriptionTextArea = new javax.swing.JTextArea();
        intervalConfigurationPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        minutesLabel = new javax.swing.JLabel();
        minutesSpinner = new javax.swing.JSpinner();
        secondsLabel = new javax.swing.JLabel();
        secondsSpinner = new javax.swing.JSpinner();
        statsDescriptionPanel = new javax.swing.JPanel();
        statsPanel = new javax.swing.JPanel();
        jsonOutputCheckBox = new javax.swing.JCheckBox();
        xmlOutputCheckBox = new javax.swing.JCheckBox();
        textOutputCheckBox = new javax.swing.JCheckBox();
        externalCommandPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        externalCmdDescriptionTextArea = new javax.swing.JTextArea();
        externalCommandScrollPane = new javax.swing.JScrollPane();
        externalCommandTextArea = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        variablesLabel = new javax.swing.JLabel();
        variablesList = new javax.swing.JComboBox<>();
        insertButton = new javax.swing.JButton();
        allowProjectCmdCheckBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        intervalDescriptionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(OStrings.getString("SAVE_DIALOG_INTERVAL_LABEL")));
        intervalDescriptionPanel.setLayout(new java.awt.BorderLayout());

        intervalDescriptionTextArea.setEditable(false);
        intervalDescriptionTextArea.setColumns(40);
        intervalDescriptionTextArea.setFont(minutesLabel.getFont()
        );
        intervalDescriptionTextArea.setLineWrap(true);
        intervalDescriptionTextArea.setRows(1);
        intervalDescriptionTextArea.setTabSize(4);
        intervalDescriptionTextArea.setText(OStrings.getString("SAVE_DIALOG_DESCRIPTION"));
        intervalDescriptionTextArea.setWrapStyleWord(true);
        intervalDescriptionTextArea.setAutoscrolls(false);
        intervalDescriptionTextArea.setFocusable(false);
        intervalDescriptionTextArea.setOpaque(false);
        intervalDescriptionTextArea.setRequestFocusEnabled(false);
        intervalDescriptionPanel.add(intervalDescriptionTextArea, java.awt.BorderLayout.NORTH);

        intervalConfigurationPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        minutesLabel.setLabelFor(minutesSpinner);
        org.openide.awt.Mnemonics.setLocalizedText(minutesLabel, OStrings.getString("SAVE_DIALOG_MINUTES")); // NOI18N
        minutesLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(minutesLabel, gridBagConstraints);

        minutesSpinner.setValue(90);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        jPanel1.add(minutesSpinner, gridBagConstraints);

        secondsLabel.setLabelFor(secondsSpinner);
        org.openide.awt.Mnemonics.setLocalizedText(secondsLabel, OStrings.getString("SAVE_DIALOG_SECONDS")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(secondsLabel, gridBagConstraints);

        secondsSpinner.setValue(90);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        jPanel1.add(secondsSpinner, gridBagConstraints);

        intervalConfigurationPanel.add(jPanel1);

        intervalDescriptionPanel.add(intervalConfigurationPanel, java.awt.BorderLayout.CENTER);

        add(intervalDescriptionPanel);

        statsDescriptionPanel.setLayout(new java.awt.BorderLayout());

        statsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(OStrings.getString("SAVE_DIALOG_STATS_OUTPUT_FORMAT")));
        statsPanel.setAlignmentX(0.0F);
        statsPanel.setAlignmentY(0.0F);
        statsPanel.setMaximumSize(new java.awt.Dimension(1010, 87));
        statsPanel.setMinimumSize(new java.awt.Dimension(800, 87));
        statsPanel.setPreferredSize(new java.awt.Dimension(800, 100));
        statsPanel.setLayout(new javax.swing.BoxLayout(statsPanel, javax.swing.BoxLayout.PAGE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(jsonOutputCheckBox, OStrings.getString("STATS_FORMAT_TEXT"));
        statsPanel.add(jsonOutputCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(xmlOutputCheckBox, OStrings.getString("STATS_FORMAT_JSON"));
        statsPanel.add(xmlOutputCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(textOutputCheckBox,  OStrings.getString("STATS_FORMAT_XML"));
        statsPanel.add(textOutputCheckBox);

        statsDescriptionPanel.add(statsPanel, java.awt.BorderLayout.PAGE_END);

        add(statsDescriptionPanel);

        externalCommandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(OStrings.getString("EXTERNAL_COMMAND_LABEL")));
        externalCommandPanel.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.BorderLayout());

        externalCmdDescriptionTextArea.setEditable(false);
        externalCmdDescriptionTextArea.setFont(minutesLabel.getFont());
        externalCmdDescriptionTextArea.setLineWrap(true);
        externalCmdDescriptionTextArea.setText(OStrings.getString("EXTERNAL_COMMAND_DESCRIPTION")); // NOI18N
        externalCmdDescriptionTextArea.setWrapStyleWord(true);
        externalCmdDescriptionTextArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        externalCmdDescriptionTextArea.setOpaque(false);
        jPanel8.add(externalCmdDescriptionTextArea, java.awt.BorderLayout.NORTH);

        externalCommandTextArea.setColumns(20);
        externalCommandTextArea.setLineWrap(true);
        externalCommandTextArea.setRows(5);
        externalCommandScrollPane.setViewportView(externalCommandTextArea);

        jPanel8.add(externalCommandScrollPane, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(variablesLabel, OStrings.getString("EXT_TMX_MATCHES_TEMPLATE_VARIABLES")); // NOI18N
        jPanel4.add(variablesLabel, java.awt.BorderLayout.WEST);
        jPanel4.add(variablesList, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(insertButton, OStrings.getString("BUTTON_INSERT")); // NOI18N
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });
        jPanel4.add(insertButton, java.awt.BorderLayout.EAST);

        jPanel8.add(jPanel4, java.awt.BorderLayout.SOUTH);

        externalCommandPanel.add(jPanel8, java.awt.BorderLayout.CENTER);

        allowProjectCmdCheckBox.setFont(new JLabel().getFont());
        org.openide.awt.Mnemonics.setLocalizedText(allowProjectCmdCheckBox, OStrings.getString("ALLOW_PROJECT_EXTERN_CMD")); // NOI18N
        externalCommandPanel.add(allowProjectCmdCheckBox, java.awt.BorderLayout.SOUTH);

        add(externalCommandPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_insertButtonActionPerformed

    }// GEN-LAST:event_insertButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JCheckBox allowProjectCmdCheckBox;
    private javax.swing.JTextArea externalCmdDescriptionTextArea;
    private javax.swing.JPanel externalCommandPanel;
    private javax.swing.JScrollPane externalCommandScrollPane;
    javax.swing.JTextArea externalCommandTextArea;
    javax.swing.JButton insertButton;
    private javax.swing.JPanel intervalConfigurationPanel;
    private javax.swing.JPanel intervalDescriptionPanel;
    private javax.swing.JTextArea intervalDescriptionTextArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    javax.swing.JCheckBox jsonOutputCheckBox;
    private javax.swing.JLabel minutesLabel;
    javax.swing.JSpinner minutesSpinner;
    private javax.swing.JLabel secondsLabel;
    javax.swing.JSpinner secondsSpinner;
    private javax.swing.JPanel statsDescriptionPanel;
    private javax.swing.JPanel statsPanel;
    javax.swing.JCheckBox textOutputCheckBox;
    private javax.swing.JLabel variablesLabel;
    javax.swing.JComboBox<String> variablesList;
    javax.swing.JCheckBox xmlOutputCheckBox;
    // End of variables declaration//GEN-END:variables
}
