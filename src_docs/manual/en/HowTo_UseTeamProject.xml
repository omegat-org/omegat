<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../docbook-xml-4.5/docbookx.dtd">
<section id="how.to.use.team.project">
  <title id="how.to.use.team.project.title">Use a team project</title>

  <para>Team projects use synchronization mechanisms between project members.</para>

  <para>Once a OmegaT team project is installed on a server, the administrator
  sends members the information they need to access it: a URL indicating the
  location of the project, or an <filename>omegat.project</filename>
  file.</para>

  <para>After the project is downloaded, it is installed locally and only needs
  to be opened locally to synchronize with the server.</para>

  <para>Repository credentials are stored in the <link
  linkend="configuration.folder.extra.contents.repositories"
  endterm="configuration.folder.extra.contents.repositories.title"/> file and
  can be deleted from the <link
  linkend="dialog.preferences.team.title.repository.credentials"
  endterm="dialog.preferences.team.title.repository.credentials.title"/>
  preferences.</para>

  <para>Since synchronization takes place by default every three minutes, 
  project members will sometime translate or modify a segment that has already
  been translated by another member but not synchronized yet. When that happens,
  members have to select the appropriate translation.</para>

  <para>Members can take turns translating and reviewing the files. The Search
  function allows them to filter the Editor pane on contents translated by a
  given person, or on contents translated after or before a given time,
  for example.</para>
  
  <variablelist>
    <varlistentry>
      <term>Downloading the project</term>
      <listitem>
		<orderedlist>
		  <listitem>
			<para>From a URL</para>

			<para>Use <link endterm="menus.project.title"
			linkend="menus.project"/><link
			endterm="menus.project.download.team.project.title"
			linkend="menus.project.download.team.project"/> to bring up the
			<guilabel>Download Team Project</guilabel> dialog.</para>

			<para>Enter the URL provided by the team project administrator in the
			<guilabel>Repository URL:</guilabel> field at the top of the dialog,
			and specify a folder for the project in the <guilabel>New Local
			Project Folder:</guilabel> field. Leave the <guilabel>Default
			branch</guilabel> option checked unless the project administrator
			has provided instructions for using a custom branch.</para>
		  </listitem>

		  <listitem>
			<para>From an <filename>omegat.project</filename> file</para>

			<para>Put the <filename>omegat.project</filename> file in an empty
			folder, and open it in OmegaT. The project will automatically be
			downloaded to the folder containing that file.</para>
		  </listitem>
		</orderedlist>

		<note>
		  <para>Servers generally use two main types of authentication: entering
		  a <emphasis>username/password</emphasis>, or
		  <emphasis>SSH</emphasis>.</para>

		  <para>If the server relies on username/password authentication, OmegaT
		  will present you with an <guilabel>Authentication</guilabel> dialog to
		  enter your username and password either when you first download the
		  project or later on in the process. OmegaT will then remember your
		  credentials for that specific project unless you explicitly delete
		  them. See the <link
		  linkend="dialog.preferences.team.title.repository.credentials"
		  endterm="dialog.preferences.team.title.repository.credentials.title"/>
		  preferences for details.</para>

		  <para>If the server uses SSH authentication, make sure you update your
		  SSH configuration to include that server before attempting to download
		  the project, otherwise you will get an authentication error and the
		  project will fail to load.</para>

		  <para>If you use multiple projects on the same server, credentials
		  will only be asked once for that server.</para>
		</note>
	  </listitem>
	</varlistentry>

    <varlistentry>
      <term>Synchronization</term>

      <listitem>
        <para>Synchronizing the project adds translations made by all team
        members to local copies of the project. Only the contents of the two
        following files are synchronized:</para>

		<itemizedlist>
          <listitem>
			<para><filename>project.save</filename></para>
          </listitem>

          <listitem>
			<para><filename>glossary.txt</filename></para>
          </listitem>
        </itemizedlist>

        <para>During synchronization, all other local files are overwritten
        with the versions on the remote server, exept for
        <filename>omegat.project</filename> (see below).</para>

        <para>OmegaT synchronizes a team project when it is opened, reloaded,
        closed or saved. This means the automatic save function also regularly
        synchronizes local versions with the version on the server at the
        interval specified in the <link
        endterm="dialog.preferences.saving.and.output.interval.title"
        linkend="dialog.preferences.saving.and.output.interval"/>
        preference.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Team project configuration</term>

      <listitem>
        <para>As in regular local projects, the configuration of the team
        project is defined by the contents of the <filename>omegat.project</filename>
        file and the optional use of special files for project-specific
        filters or segmentation rules.</para>

        <para>The first time the project is downloaded, OmegaT retrieves the
        <filename>omegat.project</filename> file from the server. This file
        defines the following parameters:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>Basic project configuration:</emphasis> Source and
            languages, tokenizers, and the project folder hierarchy.</para>

			<para>In a team project, the basic configuration parameters of the
			local project are always overridden by the configuration on the
			server originally set by the project administrator.</para>
          </listitem>

          <listitem>
            <para><emphasis>Repository mappings</emphasis></para>

            <para>See the <link
            linkend="how.to.setup.team.project.mapping.parameters"
            endterm="how.to.setup.team.project.mapping.parameters.title"/>
            how-to for details.</para>

            <itemizedlist>
              <listitem>
                <para>If no custom mappings have been defined for the remote
                project, but local mappings have been customized, the local
                settings are preserved without affecting the settings on the
                server.</para>
              </listitem>

              <listitem>
                <para>If the remote project contains custom mappings, but the
                local project does not, the mappings from the server are applied
                to the local project.</para>
              </listitem>

              <listitem>
                <para>If the remote project specifies a URL protocol and you
                download it using a different protocol, your local configuration
                will be preserved.</para>

                <para>For example, many hosting services support access to the
                same repository using either the SSHâ€¯+Git or https protocol.
                OmegaT will respect the local protocol selection.</para>
              </listitem>

              <listitem>
                <para>If you first download the remote project using an
                <filename>omegat.project</filename> file provided by the project
                administrator, OmegaT will use the mappings in that file, if
                any.</para>
              </listitem>

              <listitem>
                <para>If there is a conflict between the remote and local
                versions of the <filename>omegat.project</filename> file and the
                local version is overwritten, OmegaT creates a backup file
                called <filename>omegat.project.YYYYMMDDhhmm.bak</filename>.
                OmegaT creates up to ten backup files, and older backups
                are automatically deleted in turn.</para>
              </listitem>
            </itemizedlist>
		  </listitem>
		</itemizedlist>

        <warning>
          <para>Remember that any modifications to the local project
          configuration files will be overwritten by the versions on the server
          when the project is synchronized.</para>
        </warning>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Source files</term>

      <listitem>
        <warning>
		  <para>Only the project administrator should use <link
		  endterm="menus.project.title" linkend="menus.project"/><link
		  endterm="menus.project.commit.source.files.title"
		  linkend="menus.project.commit.source.files"/>.</para>
		</warning>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Target files</term>

      <listitem>
        <para>After you generate the target files use
        <link endterm="menus.project.title"
        linkend="menus.project"/><link
        endterm="menus.project.commit.target.files.title"
        linkend="menus.project.commit.target.files"/> to add them to the
        server, if the project administrator has requested you to do so.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Deleting files</term>

      <listitem>
        <para>Files in a team project cannot be deleted from OmegaT or the local
        file system. They will be restored the next time the project is
        synchronized. This task is normally performed by the project
        administrator.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Working offline</term>

      <listitem>
        <para>You can open a team project and work on it offline. All changes
        will be synchronized the next time a connection is available.</para>

        <para>There are two ways to work offline:</para>

        <itemizedlist>
          <listitem>
            <para>Disconnect from the network before opening the
            project.</para>
          </listitem>

          <listitem>
            <para>Open the project from the command line with the
            <parameter>--no-team</parameter> option. See the <link
            linkend="launch.with.command.line"
            endterm="launch.with.command.line.title"/> section for
            details.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </varlistentry>
  </variablelist>

  <section id="how.to.admin.git.team.project.setup.workspace">
        <title id="how.to.admin.git.team.project.setup.workspace.title">Prepare git workspace</title>

        <para>Before working on the team project, you need to clone your project on your local using
            the command line: <command>git clone [repository URL]</command>
            Because OmegaT translation workspace has special folder structure and don't keep all the
            required git information on it, you should make your administration workspace other than
            OmegaT project.
        </para>

    </section>

    <section id="how.to.admin.git.team.project.take.diff">
        <title id="how.to.admin.git.team.project.take.diff.title">Check TMX updates by the team member</title>

        <para>If you want to take updates by most recent member updates on the Git team repository, the command line:
            <command>git diff HEAD..HEAD~</command>
        </para>

        <para>When your members use various OmegaT versions, or working on various Operating Systems,
            it may show big differences for line by line. It is because we use XML format as a data store
            and there are several <emphasis>standard</emphasis> encodings to write translations.
            OmegaT stores translations in the <filename>project_save.tmx</filename> file, and it can be
            express the same strings as different expressions;
            such as <programlisting>&amp;le;b0&amp;gt;escape sequence&amp;le;/b0&amp;gt;</programlisting>
            or <programlisting>&amp;le;b0>escape sequence&amp;le;/b0></programlisting>
            Both are compliant for the XML Standard.
        </para>

        <para>When you can use BASH on your platform with git command, and you have already have 'xmllint' command on your platform,
            you can look a diff with unescaped values.
            Please create small script like
            <programlisting>
                #!/bin/bash

                # Create temporary files for the canonical XML content
                LOCAL=$(mktemp)
                REMOTE=$(mktemp)

                # Perform the conversion to canonical XML format
                xmllint --c14n11 "$1" > "$LOCAL"
                xmllint --c14n11 "$2" > "$REMOTE"

                # Run diff with canonical XML content
                diff --unified=3 --ignore-case --color=always "$LOCAL" "$REMOTE" | less --raw-control-chars

                # Clean up temporary files
                rm -f "$LOCAL" "$REMOTE"
            </programlisting>
            and store it in the place your command PATH registered. And please configure your git command line such as
            <programlisting>
                git config --global difftool.xdiff.cmd 'xdiff.sh $LOCAL $REMOTE'
                git config --global difftool.prompt 0
                git config --global alias.xdiff 'difftool --tool xdiff'
            </programlisting>
            Then command <command>git xdiff HEAD..HEAD~</command> provide you to actual difference.
        </para>

        <para>
            When you want to see TMX changes in git tools, we can use a git difftool feature.
            <orderedlist>
                <listitem>
                    <para>Install XML aware diff tool supported by git, here I assume that you have already installed "Beyond Compare 4" for example.</para>
                </listitem>
                <listitem>
                    <para>you can configure to use the tool by <programlisting>git config --global difftool --difftool=bc</programlisting></para>
                </listitem>
                <listitem>
                    <para>then run "git difftool --tool=bc" to check last changes with bc</para>
                </listitem>
                <listitem>
                    <para>It will open beyond compare tool window on your desktop</para>
                </listitem>
                <listitem>
                    <para>Open "Tools" > "File Format", and select XML and add "*.tmx" to file type</para>
                </listitem>
                <listitem>
                    <para>Also select "convert" tab and select "XML Tidy".</para>
                </listitem>
                <listitem>
                    <para>Save it and reopen the file.</para>
                </listitem>
                <listitem>
                    <para>You will see only a change of contents and it will ignore a raw difference that considered
                        as same in XML, such as white space, a usage of single quote or double quote.</para>
                </listitem>
            </orderedlist>
            You can see a list of diff tool that git supports, "git difftool --tool-help"
        </para>
    </section>

    <section id="how.to.admin.git.team.project.take.target.diff">
        <title id="how.to.admin.git.team.project.take.target.diff.title">Check target artifacts by the other member</title>

        <para>There is a similar situation on Resource Bundle translations, and translator commit a target artifact file to repository.
            When your customer uses old Java version 8, it is still in support, use "ASCII" as an encoding character set,
            and OmegaT escapes Unicode characters in escape sequence "\uXXXX" form. It can be a lower case and an upper case for escaping.
            You may want to compare two versions of translations, but want to ignore a case of the escaping, and check unescaped text.
        </para>

        <para>It is still a pain even when you can ignore a difference of the case of escape, you don't want to look '\uXXXX' form of the strings.
            It is better to see unescaped string in your administration work, here is a small utility script "udiff.sh".
            <programlisting>
                #!/bin/bash

                # Unescape Unicode sequences in a properties file
                unescape() {
                perl -CSD -Mopen=':std,:utf8' -pe 's/\\u([0-9a-fA-F]{4})/chr(hex($1))/eg' "$1"
                }

                # Create temporary files for the unescaped content
                LOCAL=$(mktemp)
                REMOTE=$(mktemp)

                # Perform the unescaping
                unescape "$1" > "$LOCAL"
                unescape "$2" > "$REMOTE"

                # Run diff with unescaped content
                diff --unified=3 --ignore-case --color=always "$LOCAL" "$REMOTE" | less --raw-control-chars

                # Clean up temporary files
                rm -f "$LOCAL" "$REMOTE"
            </programlisting>
            After placing the script in your path, you can configure your git config such as
            <programlisting>
                git config --global difftool.idiff2.cmd 'udiff.sh $LOCAL $REMOTE'
                git config --global difftool.prompt 0
                git config --global alias.idiff2 'difftool --tool idiff2'
            </programlisting>
            Then you will run <command>git idiff2 HEAD..HEAD~</command> you got an unescaped difference in the most recent commit.
        </para>

    </section>
</section>
