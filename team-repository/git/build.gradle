plugins {
    id 'java-library'
}

dependencies {
    compileOnly(project.rootProject)
    if (providedLibsDir.directory) {
        compileOnly fileTree(dir: providedLibsDir, includes: ['**/commons-io-*.jar',
                                                              '**/slf4j-format-jdk14-*.jar'
                                                          ])
        implementation fileTree(dir: providedLibsDir, includes: ['**/jgit-*.jar'])
    } else {
        compileOnly(libs.slf4j.format.jdk14)
        implementation(libs.bundles.jgit)
        // For ed25519 and ecdsa support of ssh, java16+ or BC
        implementation(libs.bundles.ecdsa)
        // For gpg signing
        implementation(libs.jgit.bc)
    }
    testImplementation(testFixtures(project.rootProject))
    testImplementation(libs.commons.io)
}

jar {
    archiveAppendix.set("repository")
    destinationDirectory.set(rootProject.layout.buildDirectory.dir("modules").get())
    from configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}
    def pluginProp = loadProperties(file('plugin.properties'))
    manifest {
        attributes('License': 'GNU Public License version 3 or later',
                'Implementation-Version': pluginProp.Version,
                'OmegaT-Plugins': pluginProp.Class,
                'Plugin-Author': pluginProp.Author,
                'Plugin-Version': pluginProp.Version,
                'Plugin-Name': pluginProp.Name,
                'Plugin-Category': pluginProp.Category,
                'Plugin-Description': pluginProp.Description
        )
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
